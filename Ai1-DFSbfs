# Depth First Search (DFS)
def dfs(graph, node, visited):
    if node not in visited:
        print(node)
        visited.add(node)
        for neighbor in graph[node]:
            dfs(graph, neighbor, visited)

graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F', 'G'],
    'D': ['B'],
    'E': ['B'],
    'F': ['C'],
    'G': ['C']
}

dfs(graph, 'B', set())

# Breadth First Search (BFS)
def bfs(graph, start):
    visited, queue = set(), [start]
    
    while queue:
        vertex = queue.pop(0)
        if vertex not in visited:
            visited.add(vertex)
            queue.extend(set(graph[vertex]) - visited)
    
    return visited

graph = {
    'A': set(['B', 'C']),
    'B': set(['A', 'D', 'E']),
    'C': set(['A', 'F', 'G']),
    'D': set(['B']),
    'E': set(['B']),
    'F': set(['C']),
    'G': set(['C'])
}

bfs(graph, 'A')

# Another DFS function
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    
    visited.add(start)
    print(start)

    for next_node in graph[start]:
        if next_node not in visited:
            dfs(graph, next_node, visited)
    
    return visited

# Define another graph
graph = {
    '0': set(['1', '2']),
    '1': set(['0', '3', '4']),
    '2': set(['0']),
    '3': set(['1']),
    '4': set(['2', '3'])
}

# Start DFS traversal from node '0'
dfs(graph, '0')
