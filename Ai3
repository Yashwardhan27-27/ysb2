# ------------------------
# Selection Sort Algorithm
# ------------------------
def selection_sort(arr):
    for i in range(len(arr)):
        min_index = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
    return arr

a1 = [20, 10, 5, 7, 9, 13]
print("Selection Sort output:", selection_sort(a1))


# ------------------------
# Prim's Algorithm for Minimum Spanning Tree
# ------------------------
import heapq

def prim(graph, start):
    mst = []
    visited = set([start])
    # Create a list of edges (cost, from, to) using the start node's neighbors
    edges = [(cost, start, to) for to, cost in graph[start].items()]
    heapq.heapify(edges)

    while edges:
        cost, frm, to = heapq.heappop(edges)
        if to not in visited:
            visited.add(to)
            mst.append((frm, to, cost))
            for to_next, cost2 in graph[to].items():
                if to_next not in visited:
                    heapq.heappush(edges, (cost2, to, to_next))
    return mst

graph_prim = {
    'A': {'B': 2, 'C': 3},
    'B': {'A': 2, 'C': 1, 'D': 1},
    'C': {'A': 3, 'B': 1, 'D': 4},
    'D': {'B': 1, 'C': 4}
}

print("Prim's MST output:", prim(graph_prim, 'A'))


# ------------------------
# Kruskal's Algorithm for Minimum Spanning Tree
# ------------------------
def krushkal(graph):
    mst = []
    # Create a list of all edges (cost, from, to)
    edges = [(cost, frm, to) for frm, to_dict in graph.items() for to, cost in to_dict.items()]
    edges.sort()  # sort edges by cost
    parent = {node: node for node in graph}
    
    def find_root(node):
        if parent[node] == node:
            return node
        parent[node] = find_root(parent[node])
        return parent[node]
    
    for cost, frm, to in edges:
        root1 = find_root(frm)
        root2 = find_root(to)
        if root1 != root2:
            parent[root1] = root2  # union
            mst.append((frm, to, cost))
    return mst

graph_kruskal = {
    'A': {'8': 2, 'C': 3},
    '8': {'A': 2, 'C': 1, 'D': 1},
    'C': {'A': 3, '8': 1, 'D': 4},
    'D': {'B': 1, 'C': 4},
    'B': {}  # ensure that B exists as a node
}

print("Kruskal's MST output:", krushkal(graph_kruskal))


# ------------------------
# Job Scheduling Algorithm (Job Sequencing with Deadlines)
# ------------------------
def printJobScheduling(jobs, t):
    """
    jobs: A list of jobs where each job is represented as 
          [job_id, deadline, profit]
    t: Total number of time slots available.
    """
    # Sort jobs in descending order by profit
    jobs.sort(key=lambda x: x[2], reverse=True)
    n = len(jobs)
    
    # Initialize time slots: False indicates free
    result = [False] * t
    # To store the final scheduled job sequence
    job_seq = [''] * t
    
    # Iterate over each job in sorted order
    for i in range(n):
        # Find a free slot for this job (starting from the last possible slot).
        for j in range(min(t, jobs[i][1]) - 1, -1, -1):
            if result[j] is False:
                result[j] = True
                job_seq[j] = jobs[i][0]
                break
    print("Job scheduling sequence:", job_seq)

if __name__ == '__main__':
    jobs = [
        ['a', 2, 100],
        ['b', 1, 19],
        ['c', 2, 27],
        ['d', 1, 25],
        ['e', 3, 15]
    ]
    print("Following is maximum profit sequence of jobs")
    printJobScheduling(jobs, 3)
